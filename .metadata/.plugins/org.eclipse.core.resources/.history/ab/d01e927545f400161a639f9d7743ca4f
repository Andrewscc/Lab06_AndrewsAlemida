package Central_de_Games;

import java.util.HashMap;
import java.util.Iterator;

public class Loja {

	private HashMap<String, Usuario> listaUsuarios;

	public Loja() {
		this.listaUsuarios = new HashMap<>();
	}

	public void adicionaUsuario(Usuario novoUsuario) {
		try {
			if (!listaUsuarios.containsKey(novoUsuario.getLogin())) {
				listaUsuarios.put(novoUsuario.getLogin(), novoUsuario);

			}
		} catch (Exception e) {
			System.out.println("Usúario já cadastrado");
		}
	}

	private Usuario usuarioPorLogin(String login) {
		try {
			if (!login.trim().equals(""))
				return listaUsuarios.get(login);
		} catch (Exception e) {
			System.out.println("Login não pode ser nulo ou vazio");
		}
		return null;
	}

	public void adicionaDinheiro(String login, double dinheiro) {
		Usuario novoUsuario = usuarioPorLogin(login);
		try {
			novoUsuario.setDinheiro(dinheiro);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void venderJogo(String login, String nome, double preco, Tipo tipo) {
		Jogo novoJogo = null;
		try {
			novoJogo = new Jogo(nome, preco, tipo);
		} catch (Exception e) {
			e.printStackTrace();
		}
		Usuario novoUsuario = usuarioPorLogin(login);
		if (!novoUsuario.jogosComprados.contains(novoJogo) && novoUsuario.getDinheiro() >= novoJogo.getPreco())
			try {
				novoUsuario.Comprar(novoJogo);
			} catch (Exception e) {
				e.printStackTrace();
			}
	}

	public void upgrade(String login) throws Exception {
		Usuario novoUsuario = usuarioPorLogin(login);
		if (novoUsuario.getX2p() >= 1000) {
			if (!novoUsuario.getClass().equals(Veterano.class)) {
				Veterano novoVeterano = null;
				try {
					novoVeterano = new Veterano(novoUsuario.getNome(), novoUsuario.getLogin());
				} catch (Exception e) {
					e.printStackTrace();
				}
				try {
					novoVeterano.setDinheiro(novoUsuario.getDinheiro());
				} catch (Exception e) {
					e.printStackTrace();
				}
				try {
					novoVeterano.setX2p(novoUsuario.getX2p());
				} catch (Exception e) {
					e.printStackTrace();
				}
				novoVeterano.setJogosComprados(novoUsuario.getJogos());
				listaUsuarios.remove(novoUsuario);
				adicionaUsuario(novoVeterano);
			}else {
				throw new Exception("Usuario já é veterano");
			}
		}else{
			throw new Exception ("Usuario não possui pontos suficientes para upgrade");
		}

	}

	@Override
	public String toString() {
		String msg = "== Central P2-CG === \n\n";
		Iterator<Usuario> it = listaUsuarios.values().iterator();
		while (it.hasNext()) {
			msg += it.toString() + "\n\n";

		}
		msg += "--------------------------------------------";
		return msg;
	}
}
